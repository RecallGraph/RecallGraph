name: CI
on:
  push:
    branches-ignore:
      - documentation
  pull_request:
    branches: [ development ]
  workflow_dispatch:
#   schedule:
#     - cron: '0 0 * * 5'

jobs:
  test:
    runs-on: ubuntu-latest
    environment: github-actions

    strategy:
      fail-fast: false
      matrix:
        arangodb-version:
          - 3.6-nightly
          - 3.7-nightly
          - 3.8-nightly
        env:
          - files: '["test/integration/lib/routes/event/log.test.js"]'
            grep: 'Path as query param'

          - files: '["test/integration/lib/routes/event/log.test.js"]'
            grep: 'Path as body param'

          - files: '["test/integration/lib/routes/history/show.test.js"]'
            grep: 'Path as query param'

          - files: '["test/integration/lib/routes/history/show.test.js"]'
            grep: 'Path as body param'

          - files: '["test/integration/lib/routes/history/traverse.test.js"]'
            grep: 'with filters'

          - files: '["test/integration/lib/routes/history/traverse.test.js"]'
            grep: 'without filters'

          - files: '["test/integration/lib/routes/history/kShortestPaths.test.js"]'

          - files: '["test/integration/lib/routes/document/*.js", "test/integration/lib/routes/event/diff.test.js"]'

          - files: '["test/unit/lib/handlers/logHandlers.test.js"]'
            grep: 'Path as query param'

          - files: '["test/unit/lib/handlers/logHandlers.test.js"]'
            grep: 'Path as body param'

          - files: '["test/unit/lib/handlers/logHandlers.test.js"]'
            grep: 'Provider'

          - files: '["test/unit/lib/handlers/showHandlers.test.js"]'
            grep: 'Path as query param'

          - files: '["test/unit/lib/handlers/showHandlers.test.js"]'
            grep: 'Path as body param'

          - files: '["test/unit/lib/handlers/showHandlers.test.js"]'
            grep: 'Provider'

          - files: '["test/unit/lib/handlers/traverseHandlers.test.js"]'
            grep: 'Handlers.*With Filters'

          - files: '["test/unit/lib/handlers/traverseHandlers.test.js"]'
            grep: 'Handlers.*Without Filters'

          - files: '["test/unit/lib/handlers/traverseHandlers.test.js"]'
            grep: 'Provider.*With Filters'

          - files: '["test/unit/lib/handlers/traverseHandlers.test.js"]'
            grep: 'Provider.*Without Filters'

          - files: '["test/unit/lib/handlers/kShortestPathsHandlers.test.js"]'

          - files: '["test/unit/lib/handlers/createHandlers.test.js", "test/unit/lib/handlers/removeHandlers.test.js", "test/unit/lib/handlers/replaceHandlers.test.js", "test/unit/lib/handlers/updateHandlers.test.js", "test/unit/lib/handlers/diffHandlers.test.js"]'

          - files: '["test/unit/lib/operations/log/index.test.js"]'

          - files: '["test/unit/lib/operations/traverse/index.test.js"]'
            grep: 'With Filters'

          - files: '["test/unit/lib/operations/traverse/index.test.js"]'
            grep: 'Without Filters'

          - files: '["test/unit/lib/operations/k_shortest_paths/index.test.js"]'

          - files: '["test/unit/lib/*.js", "test/unit/lib/middleware/*.js", "test/unit/lib/operations/*.js", "test/unit/lib/operations/commit/*.js", "test/unit/lib/operations/diff/*.js", "test/unit/lib/operations/show/*.js", "test/unit/lib/operations/traverse/helpers.test.js", "test/unit/lib/operations/log/helpers.test.js"]'

    services:
      arangodb:
        image: arangodb/arangodb-preview:${{ matrix.arangodb-version }}
        credentials:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        env:
          ARANGO_RANDOM_ROOT_PASSWORD: 1
          ARANGO_STORAGE_ENGINE: rocksdb
          FILES: ${{ matrix.env.files }}
          GREP: ${{ matrix.env.grep }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        volumes:
          - ${{ github.workspace }}:/mnt/evstore
        options: '--name arangodb'

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Install
        run: |
          npm install
          sudo apt update
          sudo apt install dos2unix

      - name: Init
        run: |
          rm -rf ./.nyc_output/*
          npx nyc instrument . ./.nyc_output/instrumented
          cp -r ./.nyc_output/instrumented/lib .
          export ARANGO_ROOT_PASSWORD=$(docker logs arangodb |grep 'GENERATED ROOT PASSWORD' |awk '{ print $4 }')
          docker exec -i arangodb arangosh --server.password=$ARANGO_ROOT_PASSWORD < ./test/actions/create_db.js
          docker exec arangodb /bin/sh -c 'dos2unix < /mnt/evstore/test/actions/install.sh |sh -s'

      - name: Test
        run: dos2unix < ./test/actions/runner.sh |bash -s

      - name: Push Test Reports to S3
        run: |
          aws s3 sync ./test/reports/ s3://$S3_BUCKET/$GITHUB_RUN_ID/$GITHUB_RUN_NUMBER/
          echo "Copied test reports to s3://$S3_BUCKET/$GITHUB_RUN_ID/$GITHUB_RUN_NUMBER"

      - name: Push Coverage Reports to S3
        run: |
          rm -rf ./.nyc_output/instrumented
          aws s3 sync ./.nyc_output/ s3://$S3_BUCKET/$GITHUB_RUN_ID/$GITHUB_RUN_NUMBER/
          echo "Copied coverage reports to s3://$S3_BUCKET/$GITHUB_RUN_ID/$GITHUB_RUN_NUMBER"

  analysis:
    runs-on: ubuntu-latest
    environment: github-actions
    needs:
      - test

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Prepare Coverage & Lint Reports
        run: |
          aws s3 sync s3://$S3_BUCKET/$GITHUB_RUN_ID/$GITHUB_RUN_NUMBER/ ./.nyc_output/ --exclude '*' --include 'coverage*.json'
          echo 'Found following files in ./.nyc_output/:'
          ls -l ./.nyc_output
          npx nyc merge ./.nyc_output ./.nyc_output/out.json
          npx nyc report --report-dir=./test/reports -r lcovonly
          npx eslint ./main.js ./lib/ ./scripts
            -f json
            -o ./test/reports/eslint-report.json

      - name: Check Coverage
        run: npx nyc check-coverage --lines 80 --functions 80 --branches 70

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        if: ${{ github.event_name != 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Push Reports to S3
        run: |
          aws s3 sync ./test/reports/ s3://$S3_BUCKET/$GITHUB_RUN_ID/$GITHUB_RUN_NUMBER/
          echo "Copied coverage and lint reports to s3://$S3_BUCKET/$GITHUB_RUN_ID/$GITHUB_RUN_NUMBER"
          aws s3 cp ./.nyc_output/out.json s3://$S3_BUCKET/$GITHUB_RUN_ID/$GITHUB_RUN_NUMBER/
          echo "Copied merged coverage data to s3://$S3_BUCKET/$GITHUB_RUN_ID/$GITHUB_RUN_NUMBER"
